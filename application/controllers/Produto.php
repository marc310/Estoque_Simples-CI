<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Produto extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Produto_model');
    } 

    /*
     * Listing of produtos
     */
    function index()
    {
        redirect('produtos/index');
    }

    /*
     * Adding a new produto
     */
    function add()
    {   
        if($this->session->userdata('nomeusuario') == '')  
           {  
                redirect(site_url('login')); 
           }
        $this->load->library('form_validation');

		$this->form_validation->set_rules('modeloID','ModeloID','required');
		$this->form_validation->set_rules('categoriaID','CategoriaID','required');
		$this->form_validation->set_rules('nome','Nome','required');
		
        if ($this->form_validation->run() == false) 
        {
            $this->data['custom_error'] = (validation_errors() ? true : false);
        }
        else 
        {
            $params = array(
				'modeloID' => $this->input->post('modeloID'),
				'categoriaID' => $this->input->post('categoriaID'),
				'nome' => $this->input->post('nome'),
				'descricao' => $this->input->post('descricao'),
            );
            //
            if ( is_numeric($idP = $this->Produto_model->add_produto($params, true)) ) {
                redirect('produto/edit/'.$idP);

            } else {
                
                $this->data['custom_error'] = '<div class="form_error"><p>An Error Occured.</p></div>';
            }
            /*         if ( is_numeric($id = $this->os_model->add('os', $data, true)) ) {
                $this->session->set_flashdata('success','OS adicionada com sucesso, você pode adicionar produtos ou serviços a essa OS nas abas de "Produtos" e "Serviços"!');
                redirect('os/editar/'.$id);
                
            } else {
                
                $this->data['custom_error'] = '<div class="form_error"><p>An Error Occured.</p></div>';
            } */
            //
            //$produto_id = $this->Produto_model->add_produto($params);
            //redirect('produto/index');
            //
        }
        
			$this->load->model('Modelo_model');
			$data['all_modelos'] = $this->Modelo_model->get_all_modelos();

			$this->load->model('Categoria_model');
			$data['all_categorias'] = $this->Categoria_model->get_all_categorias();
            
            $data['_view'] = 'produto/add';
            $this->load->view('common/header');
            $this->load->view('common/menu');
            $this->load->view('layouts/main',$data);
            $this->load->view('common/footer');
    }  

    /*
     * Editing a produto
     */
    function edit($idP)
    {   
        if($this->session->userdata('nomeusuario') == '')  
           {  
                redirect(site_url('login')); 
           }
        // check if the produto exists before trying to edit it
        $data['produto'] = $this->Produto_model->get_produto($idP);
        
        if(isset($data['produto']['idP']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('modeloID','ModeloID','required');
			$this->form_validation->set_rules('categoriaID','CategoriaID','required');
			$this->form_validation->set_rules('nome','Nome','required');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'modeloID' => $this->input->post('modeloID'),
					'categoriaID' => $this->input->post('categoriaID'),
					'nome' => $this->input->post('nome'),
					'descricao' => $this->input->post('descricao'),
                );

                $this->Produto_model->update_produto($idP,$params);            
                redirect('produto/index');
            }
            else
            {
                
                $this->load->model('Tamanhos_produto_model');
                $data['tamanhos_produtos'] = $this->Tamanhos_produto_model->lista_tamanhos_produto($idP);
                
                
                #$config['total_rows'] = $this->Tamanhos_produto_model->get_all_tamanhos_produtos_count();
                #$this->pagination->initialize($config);
                

				$this->load->model('Modelo_model');
				$data['all_modelos'] = $this->Modelo_model->get_all_modelos();

				$this->load->model('Categoria_model');
                $data['all_categorias'] = $this->Categoria_model->get_all_categorias();

                $this->load->model('Tamanho_model');
                $data['all_tamanhos'] = $this->Tamanho_model->get_all_tamanhos();

                $this->load->model('Cores_model');
                $data['all_cores'] = $this->Cores_model->get_all_cores();

                $this->load->model('Produto_model');
                $data['all_produtos'] = $this->Produto_model->get_all_produtos();

                $data['_view'] = 'produto/edit';
                $this->load->view('common/header');
                $this->load->view('common/menu');
                $this->load->view('layouts/main',$data);
                $this->load->view('common/footer');
            }
        }
        else
            show_error('The produto you are trying to edit does not exist.');
    } 

    /*
     * Ler produto
     */
    public function read($idP) 
    {
        if($this->session->userdata('nomeusuario') == '')  
           {  
                redirect(site_url('login')); 
           }
        $row = $this->Produto_model->produtosPorID($idP);
        if ($row) {
            $data = array(
                'idP' => $row->idP,
		'nome' => $row->nome,
		'descricao' => $row->descricao,
        'modeloID' => $row->modeloID,
        'modelo' => $row->modelo,
		'categoriaID' => $row->categoriaID,
		'categoria' => $row->categoria
        );
            $this->load->model('Tamanhos_produto_model');
            $data['tamanhos_produtos'] = $this->Tamanhos_produto_model->lista_tamanhos_produto($idP);
                
        $this->load->view('common/header');
        $this->load->view('common/menu');
        $this->load->view('produto/produto_read', $data);
        $this->load->view('common/footer');
        } else {
            $this->session->set_flashdata('message', 'Record Not Found');
            redirect(site_url('produtos'));
        }
    }

    /*
     * Deleting produto
     */
    function remove($idP)
    {
        $produto = $this->Produto_model->get_produto($idP);

        // check if the produto exists before trying to delete it
        if(isset($produto['idP']))
        {
            $this->Produto_model->delete_produto($idP);
            redirect('produto/index');
        }
        else
            show_error('The produto you are trying to delete does not exist.');
    }

    public function word($idP)
    {
        header("Content-type: application/vnd.ms-word");
        header("Content-Disposition: attachment;Filename=produtos.doc");

        $data = array(
            'produto_data' => $this->Produto_model->produtosPorID($idP),
            'start' => 0
        );
        
        $this->load->view('produto/produto_doc',$data);
    }
    
}


